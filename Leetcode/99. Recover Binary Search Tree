class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        x = y = pred = predecessor = None

        while root:
            if root.left:
                # Find the rightmost node in left subtree
                predecessor = root.left
                while predecessor.right and predecessor.right != root:
                    predecessor = predecessor.right

                if not predecessor.right:
                    predecessor.right = root
                    root = root.left
                else:
                    if pred and root.val < pred.val:
                        y = root
                        if not x:
                            x = pred
                    pred = root

                    predecessor.right = None
                    root = root.right
            else:
                if pred and root.val < pred.val:
                    y = root
                    if not x:
                        x = pred
                pred = root
                root = root.right

        x.val, y.val = y.val, x.val
